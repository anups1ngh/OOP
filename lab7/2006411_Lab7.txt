----------------------- Lab7--Anup Singh-------------------------


Answer--1


#include<iostream>
#include<cstring>
using namespace std;

class student{
    char name[20];
    int age;
    int roll;
    public:
        
        student(char *n,int a,int r)
        {
            cout<<"\nStudent constructor is invoked\n";
            strcpy(name,n);
            age=a;
            roll=r;
        }
        student(){cout<<"Student constructor is called\n";};
        void display()
        {
            cout<<"\nName: "<<name<<endl;
            cout<<"age: "<<age<<endl;
            cout<<"Roll: "<<roll<<endl;
        }
        ~student(){cout<<"Destructor invoked\n";}
};

class test:public student
{
    int marks[5];
    public:
    test(char *n,int a,int r,int m[]):student(n,a,r)
    {
        cout<<"\ntest constructor is invoked\n";
        for(int i=0;i<5;i++)
        {
            marks[i]=m[i];
        }
    }

    ~test(){cout<<"Destructor invoked\n";}

    void display()
    {
        student::display();
        cout<<"Marks:\n";
        for(int i=0;i<5;i++)
        {
            cout<<"marks "<<i+1<<": "<<marks[i]<<endl;
        }
    }
};

int main()
{
    char na[20];
    int mark[5];
    int ag;
    int ro;
    cout<<"Enter name: ";
    cin.getline(na,20);
    cout<<"Enter Roll: ";
    cin>>ro;
    cout<<"Enter Age: ";
    cin>>ag;
    for(int i=0;i<5;i++)
    {
        cout<<"Enter marks "<<i+1<<": ";
        cin>>mark[i];
    }
    test t(na,ag,ro,mark);
    t.display();
}


Answer--2

#include<iostream>
#include<cstring>
using namespace std;

class student{
    char name[20];
    int age;
    int roll;
    public:

        student(char *n,int a,int r)
        {
            cout<<"Student constructor is called\n";
            strcpy(name,n);
            age=a;
            roll=r;
        }
        void display()
        {
            cout<<"\nName: "<<name<<endl;
            cout<<"age: "<<age<<endl;
            cout<<"Roll: "<<roll<<endl;
        }
};

class test:public student
{
    int marks[5];
    public:
    test(char *n,int a,int r,int m[]):student(n,a,r)
    {
        cout<<"test constructor is called\n";
        student(n,a,r);
        for(int i=0;i<5;i++)
        {
            marks[i]=m[i];
        }
    }

    
    void display()
    {
        student::display();
        cout<<"Marks:\n";
        for(int i=0;i<5;i++)
        {
            cout<<"marks "<<i+1<<": "<<marks[i]<<endl;
        }
    }
};

class result:public test
{
    int total=0;
    float percentage;
    char grade;
    public:
        result(char *n,int a,int r,int m[]):test(n,a,r,m)
        {
            
            for(int i=0;i<5;i++)
            {
                total=total+m[i];
            }
            percentage=total/5.0;
            if(percentage>=90)
            grade='O';
            else if(percentage>=80)
            grade='E';
            else if(percentage>=70)
            grade='A';
            else if(percentage>=60)
            grade='B';
            else
            grade='F';
        }
        void display()
        {
            test::display();
            cout<<"Total marks: "<<total<<endl;
            cout<<"Percentage: "<<percentage<<" %"<<endl;
            cout<<"Grade: "<<grade<<endl;
        }

};

int main()
{
    char na[20];
    int mark[5];
    int ag;
    int ro;
    cout<<"Enter name: ";
    cin.getline(na,20);
    cout<<"Enter Roll: ";
    cin>>ro;
    cout<<"Enter Age: ";
    cin>>ag;
    for(int i=0;i<5;i++)
    {
        cout<<"Enter marks "<<i+1<<": ";
        cin>>mark[i];
    }
    result r(na,ag,ro,mark);
    r.display();
}


Answer--3

#include<iostream>
#include<cstring>
using namespace std;

class student{
    char name[20];
    int age;
    int roll;
    public:
        student(){cout<<"student Constructor executed\n";};
        student(char *n,int a,int r)
        {
            cout<<"student Constructor executed\n";
            strcpy(name,n);
            age=a;
            roll=r;
        }
        void display()
        {
            cout<<"\nName: "<<name<<endl;
            cout<<"age: "<<age<<endl;
            cout<<"Roll: "<<roll<<endl;
        }
};

class test:virtual public student
{
    int marks[5];
    public:
    test(){cout<<"test Constructor executed\n";};
    test(char *n,int a,int r,int m[]):student(n,a,r)
    {
        cout<<"test Constructor executed\n";
        for(int i=0;i<5;i++)
        {
            marks[i]=m[i];
        }
    }
    void display()
    {
        cout<<"Marks:\n";
        for(int i=0;i<5;i++)
        {
            cout<<"marks "<<i+1<<": "<<marks[i]<<endl;
        }
    }
};

class activity:virtual public student
{
    protected:
    int act[2];
    int co=0;
    public:
    activity(){cout<<"activity Constructor executed\n";};
    activity(char *n,int a,int r,int ac[]):student(n,a,r)
    {
        for(int i=0;i<2;i++)
        {
            act[i]=ac[i];
            co=co+act[i];
        }
        cout<<"activity Constructor executed\n";
    }
    void display()
    {
        student::display();
        for(int i=0;i<2;i++)
        cout<<"Activity Mark "<<i+1<<" :"<<act[i]<<endl;
    }
};

class result:virtual public student,public test,public activity
{
    int total=0;
    float percentage;
    char grade;
    public:
        result(){cout<<"result Constructor executed\n";};
        result(char *n,int a,int r,int m[],int ac[]):student(n,a,r),test(n,a,r,m),activity(n,a,r,ac)
        {
            cout<<"result Constructor executed\n";
            for(int i=0;i<5;i++)
            {
                total=total+m[i];
            }
            total=total+co;
            percentage=total/7.0;
            if(percentage>=90)
            grade='O';
            else if(percentage>=80)
            grade='E';
            else if(percentage>=70)
            grade='A';
            else if(percentage>=60)
            grade='B';
            else if(percentage>=50)
            grade='C';
            else if(percentage>=40)
            grade='D';
            else
            grade='F';
        }
        void display()
        {
            activity::display();
            test::display();
            cout<<"Total marks: "<<total<<endl;
            cout<<"Percentage: "<<percentage<<" %"<<endl;
            cout<<"Grade: "<<grade<<endl;
        }

};

int main()
{
    char na[20];
    int mark[5];
    int ag,ac[2];
    int ro;
    cout<<"Enter name: ";
    cin.getline(na,20);
    cout<<"Enter Roll: ";
    cin>>ro;
    cout<<"Enter Age: ";
    cin>>ag;
    for(int i=0;i<5;i++)
    {
        cout<<"Enter marks "<<i+1<<": ";
        cin>>mark[i];
    }
    for(int i=0;i<2;i++)
    {
        cout<<"Enter activity marks "<<i+1<<" :";
        cin>>ac[i];
    }
    result r(na,ag,ro,mark,ac);    
    r.display();
}


Answer--4

#include<iostream>
using namespace std;

class shape
{
    protected:
    float area;
    public:
    void display()
    {
        cout<<area<<" m^2"<<endl;
    }
};
class circle:public shape
{
    float cal;
    public:
    circle(float radius)
    {
        cal=3.14*radius*radius;
    }
    void display()
    {
        area=cal;
        cout<<"Area of Circle: ";
        shape::display();
    }
};
class Triangle:public shape
{
    float cal;
    public:
    Triangle(float base,float height)
    {
        cal=0.5*base*height;
    }
    void display()
    {
        area=cal;
        cout<<"Area of Triangle: ";
        shape::display();
    }
};

class rectangle:public shape
{
    float cal;
    public:
    rectangle(float length,float breadth)
    {
        cal=length*breadth;
    }
    void display()
    {
        area=cal;
        cout<<"Area of rectangle: ";
        shape::display();
    }
};

int main()
{
    float a,b;
    cout<<"Enter length and breadth: ";
    cin>>a>>b;
    rectangle r(a,b);
    r.display();
    cout<<"Enter base and height: ";
    cin>>a>>b;
    Triangle t(a,b);
    t.display();
    cout<<"Enter radius: ";
    cin>>a;
    circle c(a);
    c.display();
}


Answer--5

#include<iostream>
#include<cstring>
using namespace std;

class employee
{
    protected:
    char name[20];
    int id;
    int salary;
    public:
        employee(char *n,int i,int sal)
        {
            strcpy(name,n);
            id=i;
            salary=sal;
        }
        void display()
        {
            cout<<"\nName: "<<name<<endl;
            cout<<"Id: "<<id<<endl;
            cout<<"Salary: "<<salary<<endl;
        }
};
class regular:virtual public employee
{
    float da,hra,gross_salary;
    public:
    regular(char *n,int i,int sal):employee(n,i,sal)
    {        
        da=0.2*salary;
        hra=0.1*salary;
        gross_salary=salary+da+hra;
    }
    void display()
    {
        employee::display();
        cout<<"Basic Salary: "<<salary<<endl;
        cout<<"DA: "<<da<<endl;
        cout<<"HRA: "<<hra<<endl;
        cout<<"Gross Salary: "<<gross_salary<<endl;
    }
};
class part_time:virtual public employee
{
    float pph=6500;
    int hours;
    public:
        part_time(char *n,int i,int sal,int h):employee(n,i,sal)
        {
            hours=h;
        }
        void display()
        {

            pph=pph*hours;
            cout<<"Pay per Hour payment: "<<pph<<endl;
        }
};
int main()
{
    char na[20];
    int i,sal,hou;
    cout<<"Enter name: ";
    cin.getline(na,20);
    cout<<"Enter id: ";
    cin>>i;
    cout<<"Enter salary: ";
    cin>>sal;
    cout<<"Enter part-time hour: ";
    cin>>hou;
    regular r(na,i,sal);
    r.display();
    part_time p(na,i,sal,hou);
    p.display();
    return 0;
}


Answer--6

#include<iostream>
#include<cstring>
using namespace std;

class cricketer
{
    char name[20];
    int age;
    int jersyNumber;
    int ODIplayed;
    public:
        cricketer(char *n,int a,int j,int o)
        {
            strcpy(name,n);
            age=a;
            jersyNumber=j;
            ODIplayed=o;
        }
        void display()
        {
            cout<<"\n********************\n";
            cout<<"Name of player: "<<name<<endl;
            cout<<"Age: "<<age<<endl;
            cout<<"JersyNumber: "<<jersyNumber<<endl;
            cout<<"ODI Played: "<<ODIplayed<<endl;
        }
};

class batsman:virtual public cricketer
{
    int runstaken;
    int Batting_avg;
    int halfcentury;
    int century;
    float strikerate;
    int highest_score;
    char side;
    int numberofSixes;
    float longestSix;
    public:
        batsman(char *n,int a,int j,int o,int r,int b,int hc,int c,float s,int hs,char si,int nos,float ls):cricketer(n,a,j,o)
        {
            runstaken=r;
            Batting_avg=b;
            halfcentury=hc;
            century=c;
            strikerate=s;
            highest_score=hs;
            side=si;
            numberofSixes=nos;
            longestSix=ls;
        }
        void display()
        {
            cricketer::display();
            cout<<"Runs Taken: "<<runstaken<<endl;
            cout<<"Batting average: "<<Batting_avg<<endl;
            cout<<"Half Century: "<<halfcentury<<endl;
            cout<<"Century: "<<century<<endl;
            cout<<"Strike Rate: "<<strikerate<<endl;
            cout<<"Highest Score: "<<highest_score<<endl;
            cout<<"Playing Side: "<<side<<endl;
            cout<<"Number of Sixes: "<<numberofSixes<<endl;
            cout<<"Longest Sixes Distance: "<<longestSix<<" meter"<<endl;
        }
};

class baller:virtual public cricketer
{
    char type[5];
    int NumberofWickets;
    int runRate;
    int speed;
    int Economy;
    char bSide;
    public: 
        baller(char *n,int a,int j,int o,char *t,int now,int rr,int sp,int ec,char b):cricketer(n,a,j,o)
        {
            strcpy(type,t);
            NumberofWickets=now;
            runRate=rr;
            speed=sp;
            Economy=ec;
            bSide=b;
        }
        void display()
        {
            cricketer::display();
            cout<<"\nBalling Type: "<<type<<endl;
            cout<<"Number of wicket taken: "<<NumberofWickets<<endl;
            cout<<"Run Rate: "<<runRate<<endl;
            cout<<"Speed: "<<speed<<" km/hr"<<endl;
            cout<<"Economy: "<<Economy<<endl;
            cout<<"Bowling Side: "<<bSide<<endl;
        }
};

int main()
{
    char name[20];
    int age;
    int jersyNumber;
    int ODIplayed;
    int runstaken;
    int Batting_avg;
    int halfcentury;
    int century;
    float strikerate;
    int highest_score;
    char side;
    int numberofSixes;
    float longestSix;
    char type[5];
    int NumberofWickets;
    int runRate;
    int speed;
    int Economy;
    char bSide;
    char decide;
    cout<<"Choose\n1.Batsman Details\n2.Batsman Details"<<endl;
    cin>>decide;
    if(decide=='1')
    {
        cout<<"Name: ";
        cin.ignore();
        cin.getline(name,20);
        cout<<"Age: ";
        cin>>age;
        cout<<"Jersy Number: ";
        cin>>jersyNumber;
        cout<<"Number of ODIs Played: ";
        cin>>ODIplayed;
        cout<<"Runs Taken: ";
        cin>>runstaken;
        cout<<"Batting Average: ";
        cin>>Batting_avg;
        cout<<"Half Centuries: ";
        cin>>halfcentury;
        cout<<"Centuries: ";
        cin>>century;
        cout<<"Strike Rate: ";
        cin>>strikerate;
        cout<<"Highest Score: ";
        cin>>highest_score;
        cout<<"Batting Side: ";
        cin>>side;
        cout<<"Number of Sixes: ";
        cin>>numberofSixes;
        cout<<"Longest Six Distance: ";
        cin>>longestSix;
        batsman b(name,age,jersyNumber,ODIplayed,runstaken,Batting_avg,halfcentury,century,strikerate,highest_score,side,numberofSixes,longestSix);
        b.display();
    }
    else
    {
        cout<<"Name: ";
        cin.ignore();
        cin.getline(name,20);
        cout<<"Age: ";
        cin>>age;
        cout<<"Jersy Number: ";
        cin>>jersyNumber;
        cout<<"Number of ODIs Played: ";
        cin>>ODIplayed;
        cout<<"Pace/Spin Baller: ";
        cin>>type;
        cout<<"Numbers of Wicket Taken: ";
        cin>>NumberofWickets;
        cout<<"Run Rate: ";
        cin>>runRate;
        cout<<"Speed: ";
        cin>>speed;
        cout<<"Economy: ";
        cin>>Economy;
        cout<<"Balling side: ";
        cin>>bSide;
        baller b(name,age,jersyNumber,ODIplayed,type,NumberofWickets,runRate,speed,Economy,bSide);
        b.display();
    }
    return 0;
}


Answer--7

#include<iostream>
using namespace std;

class batsman
{
    int runstaken;
    int battingavg;
    int halfCenturies;
    int centuries;
    float strikerate;
    public:
    batsman(int r,int b,int h,int c,float s)
    {
        runstaken=r;
        battingavg=b;
        halfCenturies=h;
        centuries=c;
        strikerate=s;
    }
    void display()
    {
        
        cout<<"Runs Taken: "<<runstaken<<"\nBatting average: "<<battingavg<<"\nHalf centuries: "<<halfCenturies<<"\nCentrury: "<<centuries<<"\nStrike Rate: "<<strikerate<<endl;
    }
};

class baller
{
    int wicket_taken;
    int runrate;
    int speed;
    int hatricks;

    public:    
    baller(int w,int r,int s,int h)
    {
        wicket_taken=w;
        runrate=r;
        speed=s;
        hatricks=h;
    }
    void display()
    {
        cout<<"\n";
        cout<<"Wicket Taken: "<<wicket_taken<<"\nRun rate: "<<runrate<<"\nspeed: "<<speed<<"\nHatricks: "<<hatricks<<endl;
    }
};

class allrounder:public baller,public batsman
{
    int manofmatch;
    int internationalmatch;
    int catches;
    int iccrank;
    int stylishplayer;

    public:
    allrounder(int w,int r,int s,int h,int rb,int b,int hi,int c,float sl,int m,int in,int ci,int ic,int si):baller(w,r,s,h),batsman(rb,b,hi,c,sl)
    {
        manofmatch=m;
        internationalmatch=in;
        catches=ci;
        iccrank=ic;
        stylishplayer=si;
    }
    void display()
    {
        cout<<"\n Displaying Allrounder data: \n";
        batsman::display();
        baller::display();
        cout<<endl;
        cout<<"Man of the match: "<<manofmatch<<"\nInternational matches played: "<<internationalmatch<<"\nNo. of catches: "<<catches<<"\nICC ranking: "<<iccrank<<"\nStylish player of the match: "<<stylishplayer<<endl;
    }
};

int main()
{
    allrounder al(8,79,112,12,5012,89,52,12,142,21,33,242,18,11);
    al.display();
    return 0;
}